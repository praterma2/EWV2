
EWV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000003ca  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011e  0080011e  0000047c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f10  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007af  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b2  00000000  00000000  00001c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000513  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000068f  00000000  00000000  000027d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002e66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <main>
  9e:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z7Requestv>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	89 ef       	ldi	r24, 0xF9	; 249
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <_Z7Requestv+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <_Z7Requestv+0x1c>
  c2:	00 00       	nop
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	8b b9       	out	0x0b, r24	; 11
  ca:	08 95       	ret

000000cc <_Z12Receive_datav>:
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	28 30       	cpi	r18, 0x08	; 8
  d2:	31 05       	cpc	r19, r1
  d4:	d4 f4       	brge	.+52     	; 0x10a <_Z12Receive_datav+0x3e>
  d6:	49 9b       	sbis	0x09, 1	; 9
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <_Z12Receive_datav+0xa>
  da:	80 ea       	ldi	r24, 0xA0	; 160
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <_Z12Receive_datav+0x10>
  e0:	49 9b       	sbis	0x09, 1	; 9
  e2:	09 c0       	rjmp	.+18     	; 0xf6 <_Z12Receive_datav+0x2a>
  e4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <c>
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <c>
  f4:	05 c0       	rjmp	.+10     	; 0x100 <_Z12Receive_datav+0x34>
  f6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <c>
  fa:	88 0f       	add	r24, r24
  fc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <c>
 100:	49 99       	sbic	0x09, 1	; 9
 102:	fe cf       	rjmp	.-4      	; 0x100 <_Z12Receive_datav+0x34>
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	3f 4f       	sbci	r19, 0xFF	; 255
 108:	e3 cf       	rjmp	.-58     	; 0xd0 <_Z12Receive_datav+0x4>
 10a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <c>
 10e:	08 95       	ret

00000110 <_Z11LCD_Commandh>:
 110:	9b b1       	in	r25, 0x0b	; 11
 112:	9f 70       	andi	r25, 0x0F	; 15
 114:	28 2f       	mov	r18, r24
 116:	20 7f       	andi	r18, 0xF0	; 240
 118:	92 2b       	or	r25, r18
 11a:	9b b9       	out	0x0b, r25	; 11
 11c:	9b b1       	in	r25, 0x0b	; 11
 11e:	9b 7f       	andi	r25, 0xFB	; 251
 120:	9b b9       	out	0x0b, r25	; 11
 122:	9b b1       	in	r25, 0x0b	; 11
 124:	98 60       	ori	r25, 0x08	; 8
 126:	9b b9       	out	0x0b, r25	; 11
 128:	35 e0       	ldi	r19, 0x05	; 5
 12a:	3a 95       	dec	r19
 12c:	f1 f7       	brne	.-4      	; 0x12a <_Z11LCD_Commandh+0x1a>
 12e:	00 00       	nop
 130:	9b b1       	in	r25, 0x0b	; 11
 132:	97 7f       	andi	r25, 0xF7	; 247
 134:	9b b9       	out	0x0b, r25	; 11
 136:	ef e1       	ldi	r30, 0x1F	; 31
 138:	f3 e0       	ldi	r31, 0x03	; 3
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <_Z11LCD_Commandh+0x2a>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <_Z11LCD_Commandh+0x30>
 140:	00 00       	nop
 142:	2b b1       	in	r18, 0x0b	; 11
 144:	f0 e1       	ldi	r31, 0x10	; 16
 146:	8f 9f       	mul	r24, r31
 148:	c0 01       	movw	r24, r0
 14a:	11 24       	eor	r1, r1
 14c:	92 2f       	mov	r25, r18
 14e:	9f 70       	andi	r25, 0x0F	; 15
 150:	89 2b       	or	r24, r25
 152:	8b b9       	out	0x0b, r24	; 11
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	88 60       	ori	r24, 0x08	; 8
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	35 e0       	ldi	r19, 0x05	; 5
 15c:	3a 95       	dec	r19
 15e:	f1 f7       	brne	.-4      	; 0x15c <_Z11LCD_Commandh+0x4c>
 160:	00 00       	nop
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	87 7f       	andi	r24, 0xF7	; 247
 166:	8b b9       	out	0x0b, r24	; 11
 168:	8f e3       	ldi	r24, 0x3F	; 63
 16a:	9f e1       	ldi	r25, 0x1F	; 31
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <_Z11LCD_Commandh+0x5c>
 170:	00 c0       	rjmp	.+0      	; 0x172 <_Z11LCD_Commandh+0x62>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <_Z8LCD_Charh>:
 176:	9b b1       	in	r25, 0x0b	; 11
 178:	9f 70       	andi	r25, 0x0F	; 15
 17a:	28 2f       	mov	r18, r24
 17c:	20 7f       	andi	r18, 0xF0	; 240
 17e:	92 2b       	or	r25, r18
 180:	9b b9       	out	0x0b, r25	; 11
 182:	9b b1       	in	r25, 0x0b	; 11
 184:	94 60       	ori	r25, 0x04	; 4
 186:	9b b9       	out	0x0b, r25	; 11
 188:	9b b1       	in	r25, 0x0b	; 11
 18a:	98 60       	ori	r25, 0x08	; 8
 18c:	9b b9       	out	0x0b, r25	; 11
 18e:	35 e0       	ldi	r19, 0x05	; 5
 190:	3a 95       	dec	r19
 192:	f1 f7       	brne	.-4      	; 0x190 <_Z8LCD_Charh+0x1a>
 194:	00 00       	nop
 196:	9b b1       	in	r25, 0x0b	; 11
 198:	97 7f       	andi	r25, 0xF7	; 247
 19a:	9b b9       	out	0x0b, r25	; 11
 19c:	ef e1       	ldi	r30, 0x1F	; 31
 19e:	f3 e0       	ldi	r31, 0x03	; 3
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <_Z8LCD_Charh+0x2a>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <_Z8LCD_Charh+0x30>
 1a6:	00 00       	nop
 1a8:	2b b1       	in	r18, 0x0b	; 11
 1aa:	f0 e1       	ldi	r31, 0x10	; 16
 1ac:	8f 9f       	mul	r24, r31
 1ae:	c0 01       	movw	r24, r0
 1b0:	11 24       	eor	r1, r1
 1b2:	92 2f       	mov	r25, r18
 1b4:	9f 70       	andi	r25, 0x0F	; 15
 1b6:	89 2b       	or	r24, r25
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	88 60       	ori	r24, 0x08	; 8
 1be:	8b b9       	out	0x0b, r24	; 11
 1c0:	35 e0       	ldi	r19, 0x05	; 5
 1c2:	3a 95       	dec	r19
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <_Z8LCD_Charh+0x4c>
 1c6:	00 00       	nop
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	87 7f       	andi	r24, 0xF7	; 247
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	8f e3       	ldi	r24, 0x3F	; 63
 1d0:	9f e1       	ldi	r25, 0x1F	; 31
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <_Z8LCD_Charh+0x5c>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <_Z8LCD_Charh+0x62>
 1d8:	00 00       	nop
 1da:	08 95       	ret

000001dc <_Z8LCD_Initv>:
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	8a b9       	out	0x0a, r24	; 10
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	89 ef       	ldi	r24, 0xF9	; 249
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <_Z8LCD_Initv+0xa>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <_Z8LCD_Initv+0x14>
 1f0:	00 00       	nop
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	0e 94 88 00 	call	0x110	; 0x110 <_Z11LCD_Commandh>
 1f8:	88 e2       	ldi	r24, 0x28	; 40
 1fa:	0e 94 88 00 	call	0x110	; 0x110 <_Z11LCD_Commandh>
 1fe:	8c e0       	ldi	r24, 0x0C	; 12
 200:	0e 94 88 00 	call	0x110	; 0x110 <_Z11LCD_Commandh>
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	0e 94 88 00 	call	0x110	; 0x110 <_Z11LCD_Commandh>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 88 00 	call	0x110	; 0x110 <_Z11LCD_Commandh>
 210:	8f e3       	ldi	r24, 0x3F	; 63
 212:	9f e1       	ldi	r25, 0x1F	; 31
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <_Z8LCD_Initv+0x38>
 218:	00 c0       	rjmp	.+0      	; 0x21a <_Z8LCD_Initv+0x3e>
 21a:	00 00       	nop
 21c:	08 95       	ret

0000021e <_Z10LCD_StringPc>:
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	8c 01       	movw	r16, r24
 228:	c0 e0       	ldi	r28, 0x00	; 0
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	f8 01       	movw	r30, r16
 22e:	ec 0f       	add	r30, r28
 230:	fd 1f       	adc	r31, r29
 232:	80 81       	ld	r24, Z
 234:	88 23       	and	r24, r24
 236:	21 f0       	breq	.+8      	; 0x240 <_Z10LCD_StringPc+0x22>
 238:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8LCD_Charh>
 23c:	21 96       	adiw	r28, 0x01	; 1
 23e:	f6 cf       	rjmp	.-20     	; 0x22c <_Z10LCD_StringPc+0xe>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	08 95       	ret

0000024a <_Z10LCD_Pos_xycc>:

void LCD_Pos_xy (char row, char pos)	/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
 24a:	81 11       	cpse	r24, r1
 24c:	08 c0       	rjmp	.+16     	; 0x25e <_Z10LCD_Pos_xycc+0x14>
 24e:	60 31       	cpi	r22, 0x10	; 16
 250:	30 f4       	brcc	.+12     	; 0x25e <_Z10LCD_Pos_xycc+0x14>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 252:	86 2f       	mov	r24, r22
 254:	8f 70       	andi	r24, 0x0F	; 15
 256:	80 68       	ori	r24, 0x80	; 128
 258:	0e 94 88 00 	call	0x110	; 0x110 <_Z11LCD_Commandh>
 25c:	08 95       	ret
	else if (row == 1 && pos<16)
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	39 f4       	brne	.+14     	; 0x270 <_Z10LCD_Pos_xycc+0x26>
 262:	60 31       	cpi	r22, 0x10	; 16
 264:	28 f4       	brcc	.+10     	; 0x270 <_Z10LCD_Pos_xycc+0x26>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 266:	86 2f       	mov	r24, r22
 268:	8f 70       	andi	r24, 0x0F	; 15
 26a:	80 6c       	ori	r24, 0xC0	; 192
 26c:	0e 94 88 00 	call	0x110	; 0x110 <_Z11LCD_Commandh>
 270:	08 95       	ret

00000272 <_Z9LCD_Clearv>:
}
void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 88 00 	call	0x110	; 0x110 <_Z11LCD_Commandh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	8f e3       	ldi	r24, 0x3F	; 63
 27a:	9f e1       	ldi	r25, 0x1F	; 31
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <_Z9LCD_Clearv+0xa>
 280:	00 c0       	rjmp	.+0      	; 0x282 <_Z9LCD_Clearv+0x10>
 282:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 284:	80 e8       	ldi	r24, 0x80	; 128
 286:	0e 94 88 00 	call	0x110	; 0x110 <_Z11LCD_Commandh>
 28a:	08 95       	ret

0000028c <_Z8Responsev>:
}

void Response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT11_PIN);
 28c:	8a b1       	in	r24, 0x0a	; 10
 28e:	8d 7f       	andi	r24, 0xFD	; 253
 290:	8a b9       	out	0x0a, r24	; 10
	LCD_Char(text4[0]);
 292:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 296:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8LCD_Charh>
	while(PIND & (1<<DHT11_PIN));
 29a:	49 99       	sbic	0x09, 1	; 9
 29c:	fe cf       	rjmp	.-4      	; 0x29a <_Z8Responsev+0xe>
	LCD_Char(text4[1]);
 29e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a2:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8LCD_Charh>
	while((PIND & (1<<DHT11_PIN))==0);
 2a6:	49 9b       	sbis	0x09, 1	; 9
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <_Z8Responsev+0x1a>
	LCD_Char(text4[2]);
 2aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2ae:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8LCD_Charh>
	while(PIND & (1<<DHT11_PIN));
 2b2:	49 99       	sbic	0x09, 1	; 9
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <_Z8Responsev+0x26>
	LCD_Char(text4[3]);
 2b6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2ba:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8LCD_Charh>
 2be:	08 95       	ret

000002c0 <main>:
}


int main(void)
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
 2c8:	62 97       	sbiw	r28, 0x12	; 18
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	f8 94       	cli
 2ce:	de bf       	out	0x3e, r29	; 62
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	cd bf       	out	0x3d, r28	; 61
    LCD_Init();			/* Initialization of LCD*/
 2d4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z8LCD_Initv>
	unsigned char text1[] = "Temp: ";
 2d8:	87 e0       	ldi	r24, 0x07	; 7
 2da:	eb e0       	ldi	r30, 0x0B	; 11
 2dc:	f1 e0       	ldi	r31, 0x01	; 1
 2de:	de 01       	movw	r26, r28
 2e0:	11 96       	adiw	r26, 0x01	; 1
 2e2:	01 90       	ld	r0, Z+
 2e4:	0d 92       	st	X+, r0
 2e6:	8a 95       	dec	r24
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x22>
	unsigned char text2[] = "Humidity: ";
 2ea:	8b e0       	ldi	r24, 0x0B	; 11
 2ec:	e2 e1       	ldi	r30, 0x12	; 18
 2ee:	f1 e0       	ldi	r31, 0x01	; 1
 2f0:	de 01       	movw	r26, r28
 2f2:	18 96       	adiw	r26, 0x08	; 8
 2f4:	01 90       	ld	r0, Z+
 2f6:	0d 92       	st	X+, r0
 2f8:	8a 95       	dec	r24
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0x34>
	unsigned char text3[] = "efghij";
int j = 0;
 2fc:	00 e0       	ldi	r16, 0x00	; 0
 2fe:	10 e0       	ldi	r17, 0x00	; 0
	//writing temp
	while(text1[j] != '\0')             //display text: Humidity
 300:	e1 e0       	ldi	r30, 0x01	; 1
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	ec 0f       	add	r30, r28
 306:	fd 1f       	adc	r31, r29
 308:	e0 0f       	add	r30, r16
 30a:	f1 1f       	adc	r31, r17
 30c:	80 81       	ld	r24, Z
 30e:	88 23       	and	r24, r24
 310:	29 f0       	breq	.+10     	; 0x31c <main+0x5c>
	{
		LCD_Char(text1[j]);
 312:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8LCD_Charh>
		j++;
 316:	0f 5f       	subi	r16, 0xFF	; 255
 318:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char text1[] = "Temp: ";
	unsigned char text2[] = "Humidity: ";
	unsigned char text3[] = "efghij";
int j = 0;
	//writing temp
	while(text1[j] != '\0')             //display text: Humidity
 31a:	f2 cf       	rjmp	.-28     	; 0x300 <main+0x40>
	{
		LCD_Char(text1[j]);
		j++;
	}
    //LCD_Command(0xC0);		/* Go to 2nd line*/
    LCD_Pos_xy(1,0);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 25 01 	call	0x24a	; 0x24a <_Z10LCD_Pos_xycc>
int i = 0;
 324:	00 e0       	ldi	r16, 0x00	; 0
 326:	10 e0       	ldi	r17, 0x00	; 0
while(text2[i] != '\0')             //display text: Humidity
 328:	e8 e0       	ldi	r30, 0x08	; 8
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	ec 0f       	add	r30, r28
 32e:	fd 1f       	adc	r31, r29
 330:	e0 0f       	add	r30, r16
 332:	f1 1f       	adc	r31, r17
 334:	80 81       	ld	r24, Z
 336:	88 23       	and	r24, r24
 338:	29 f0       	breq	.+10     	; 0x344 <main+0x84>
{
	LCD_Char(text2[i]);
 33a:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8LCD_Charh>
	 i++;
 33e:	0f 5f       	subi	r16, 0xFF	; 255
 340:	1f 4f       	sbci	r17, 0xFF	; 255
		j++;
	}
    //LCD_Command(0xC0);		/* Go to 2nd line*/
    LCD_Pos_xy(1,0);
int i = 0;
while(text2[i] != '\0')             //display text: Humidity
 342:	f2 cf       	rjmp	.-28     	; 0x328 <main+0x68>
	//LCD_String("Hi");
	
	
    while (1) 
    {
		LCD_Char(text3[0]);
 344:	85 e6       	ldi	r24, 0x65	; 101
 346:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8LCD_Charh>
		Request();		/* send start pulse */
 34a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z7Requestv>
		
		Response();		/* receive response */
 34e:	0e 94 46 01 	call	0x28c	; 0x28c <_Z8Responsev>
		LCD_Char(text3[1]);
 352:	86 e6       	ldi	r24, 0x66	; 102
 354:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8LCD_Charh>
		I_RH=Receive_data();	/* store first eight bit in I_RH */
 358:	0e 94 66 00 	call	0xcc	; 0xcc <_Z12Receive_datav>
 35c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I_RH>
		D_RH=Receive_data();	/* store next eight bit in D_RH */
 360:	0e 94 66 00 	call	0xcc	; 0xcc <_Z12Receive_datav>
 364:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <D_RH>
		I_Temp=Receive_data();	/* store next eight bit in I_Temp */
 368:	0e 94 66 00 	call	0xcc	; 0xcc <_Z12Receive_datav>
 36c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <I_Temp>
		D_Temp=Receive_data();	/* store next eight bit in D_Temp */
 370:	0e 94 66 00 	call	0xcc	; 0xcc <_Z12Receive_datav>
 374:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <D_Temp>
		CheckSum=Receive_data();/* store next eight bit in CheckSum */
 378:	0e 94 66 00 	call	0xcc	; 0xcc <_Z12Receive_datav>
 37c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>

	if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
 380:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <I_RH>
 384:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <D_RH>
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	29 0f       	add	r18, r25
 38c:	31 1d       	adc	r19, r1
 38e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <I_Temp>
 392:	29 0f       	add	r18, r25
 394:	31 1d       	adc	r19, r1
 396:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <D_Temp>
 39a:	29 0f       	add	r18, r25
 39c:	31 1d       	adc	r19, r1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	28 17       	cp	r18, r24
 3a2:	39 07       	cpc	r19, r25
 3a4:	31 f0       	breq	.+12     	; 0x3b2 <main+0xf2>
	{
		LCD_Clear();
 3a6:	0e 94 39 01 	call	0x272	; 0x272 <_Z9LCD_Clearv>
		LCD_String("Error");
 3aa:	85 e0       	ldi	r24, 0x05	; 5
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 0f 01 	call	0x21e	; 0x21e <_Z10LCD_StringPc>
 3b2:	2f ef       	ldi	r18, 0xFF	; 255
 3b4:	87 ea       	ldi	r24, 0xA7	; 167
 3b6:	91 e6       	ldi	r25, 0x61	; 97
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0xf8>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x102>
 3c2:	00 00       	nop
 3c4:	bf cf       	rjmp	.-130    	; 0x344 <main+0x84>

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
